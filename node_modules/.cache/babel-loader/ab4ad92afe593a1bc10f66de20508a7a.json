{"ast":null,"code":"var _jsxFileName = \"/Users/joseluis/Desarrollos/Template/MetronicReact/src/app/routing/Routes.tsx\",\n    _s = $RefreshSig$();\n\n/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\nimport React from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MasterLayout } from '../../_metronic/layout/MasterLayout';\nimport { PrivateRoutes } from './PrivateRoutes';\nimport { Logout, AuthPage } from '../modules/auth';\nimport { ErrorsPage } from '../modules/errors/ErrorsPage';\nimport { MasterInit } from '../../_metronic/layout/MasterInit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Routes = () => {\n  _s();\n\n  const isAuthorized = useSelector(({\n    auth\n  }) => auth.user, shallowEqual);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: [!isAuthorized ?\n      /*#__PURE__*/\n\n      /*Render auth page when user at `/auth` and not authorized.*/\n      _jsxDEV(Route, {\n        children: /*#__PURE__*/_jsxDEV(AuthPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n\n      /*Otherwise redirect to root page (`/`)*/\n      _jsxDEV(Redirect, {\n        from: \"/auth\",\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/error\",\n        component: ErrorsPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/logout\",\n        component: Logout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), !isAuthorized ?\n      /*#__PURE__*/\n\n      /*Redirect to `/auth` when user is not authorized*/\n      _jsxDEV(Redirect, {\n        to: \"/auth/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MasterLayout, {\n        children: /*#__PURE__*/_jsxDEV(PrivateRoutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MasterInit, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Routes, \"NreU8953txq+1yW6k0mkN00ktRQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = Routes;\nexport { Routes };\n\nvar _c;\n\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"sources":["/Users/joseluis/Desarrollos/Template/MetronicReact/src/app/routing/Routes.tsx"],"names":["React","Redirect","Switch","Route","shallowEqual","useSelector","MasterLayout","PrivateRoutes","Logout","AuthPage","ErrorsPage","MasterInit","Routes","isAuthorized","auth","user"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,QAAR,EAAkBC,MAAlB,EAA0BC,KAA1B,QAAsC,kBAAtC;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,aAAxC;AACA,SAAQC,YAAR,QAA2B,qCAA3B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,iBAA/B;AACA,SAAQC,UAAR,QAAyB,8BAAzB;AAEA,SAAQC,UAAR,QAAyB,mCAAzB;;;;AAEA,MAAMC,MAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,YAAY,GAAGR,WAAW,CAAY,CAAC;AAACS,IAAAA;AAAD,GAAD,KAAYA,IAAI,CAACC,IAA7B,EAAmCX,YAAnC,CAAhC;AAEA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA,iBACK,CAACS,YAAD;AAAA;;AACG;AACA,cAAC,KAAD;AAAA,+BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;;AAMG;AACA,cAAC,QAAD;AAAU,QAAA,IAAI,EAAC,OAAf;AAAuB,QAAA,EAAE,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,cARR,eAWI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAEH;AAAhC;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,SAAS,EAAEF;AAAjC;AAAA;AAAA;AAAA;AAAA,cAZJ,EAcK,CAACK,YAAD;AAAA;;AACG;AACA,cAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAFH,gBAIO,QAAC,YAAD;AAAA,+BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAlBZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAwBI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAxBJ;AAAA,kBADJ;AA4BH,CA/BD;;GAAMD,M;UACmBP,W;;;KADnBO,M;AAiCN,SAAQA,MAAR","sourcesContent":["/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\r\n\r\nimport React, {FC} from 'react'\r\nimport {Redirect, Switch, Route} from 'react-router-dom'\r\nimport {shallowEqual, useSelector} from 'react-redux'\r\nimport {MasterLayout} from '../../_metronic/layout/MasterLayout'\r\nimport {PrivateRoutes} from './PrivateRoutes'\r\nimport {Logout, AuthPage} from '../modules/auth'\r\nimport {ErrorsPage} from '../modules/errors/ErrorsPage'\r\nimport {RootState} from '../../setup'\r\nimport {MasterInit} from '../../_metronic/layout/MasterInit'\r\n\r\nconst Routes: FC = () => {\r\n    const isAuthorized = useSelector<RootState>(({auth}) => auth.user, shallowEqual)\r\n\r\n    return (\r\n        <>\r\n            <Switch>\r\n                {!isAuthorized ? (\r\n                    /*Render auth page when user at `/auth` and not authorized.*/\r\n                    <Route>\r\n                        <AuthPage />\r\n                    </Route>\r\n                ) : (\r\n                    /*Otherwise redirect to root page (`/`)*/\r\n                    <Redirect from='/auth' to='/' />\r\n                )}\r\n\r\n                <Route path='/error' component={ErrorsPage} />\r\n                <Route path='/logout' component={Logout} />\r\n\r\n                {!isAuthorized ? (\r\n                    /*Redirect to `/auth` when user is not authorized*/\r\n                    <Redirect to='/auth/login' />\r\n                ) : (\r\n                        <MasterLayout>\r\n                            <PrivateRoutes />\r\n                        </MasterLayout>\r\n                )}\r\n            </Switch>\r\n            <MasterInit />\r\n        </>\r\n    )\r\n}\r\n\r\nexport {Routes}"]},"metadata":{},"sourceType":"module"}