{"ast":null,"code":"import { getAttributeValueByBreakpoint, stringSnakeToCamel, getObjectPropertyValueByKey, EventHandlerUtil, throttle } from '../_utils/index';\nexport class SwapperStore {\n  static set(instanceId, drawerComponentObj) {\n    if (SwapperStore.has(instanceId)) {\n      return;\n    }\n\n    SwapperStore.store.set(instanceId, drawerComponentObj);\n  }\n\n  static get(instanceId) {\n    if (!SwapperStore.has(instanceId)) {\n      return;\n    }\n\n    return SwapperStore.store.get(instanceId);\n  }\n\n  static remove(instanceId) {\n    if (!SwapperStore.has(instanceId)) {\n      return;\n    }\n\n    SwapperStore.store.delete(instanceId);\n  }\n\n  static has(instanceId) {\n    return SwapperStore.store.has(instanceId);\n  }\n\n  static getAllInstances() {\n    return SwapperStore.store;\n  }\n\n}\nSwapperStore.store = new Map();\nconst defaultSwapperOptions = {\n  mode: 'append'\n};\nconst defaultSwapperQueires = {\n  componentName: 'swapper',\n  instanseQuery: '[data-kt-swapper=\"true\"]',\n  attrQuery: 'data-kt-swapper-'\n};\n\nclass SwapperComponent {\n  constructor(_element, _options, _queries) {\n    this.element = void 0;\n    this.options = void 0;\n    this.queries = void 0;\n\n    this.update = () => {\n      var _this$getOption;\n\n      const parentSelector = (_this$getOption = this.getOption('parent')) === null || _this$getOption === void 0 ? void 0 : _this$getOption.toString();\n      const mode = this.getOption('mode');\n      const parentElement = parentSelector ? document.querySelector(parentSelector) : null;\n\n      if (parentElement && this.element.parentNode !== parentElement) {\n        if (mode === 'prepend') {\n          parentElement.prepend(this.element);\n        } else if (mode === 'append') {\n          parentElement.append(this.element);\n        }\n      }\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultSwapperOptions, _options);\n    this.queries = _queries; // Initial update\n\n    this.update();\n    SwapperStore.set(this.element.id, this);\n  }\n\n  getOption(name) {\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`);\n\n    if (attr) {\n      let value = getAttributeValueByBreakpoint(attr);\n\n      if (attr != null && String(value) === 'true') {\n        return true;\n      } else if (value !== null && String(value) === 'false') {\n        return false;\n      }\n\n      return value;\n    } else {\n      const optionName = stringSnakeToCamel(name);\n      const option = getObjectPropertyValueByKey(this.options, optionName);\n\n      if (option) {\n        return getAttributeValueByBreakpoint(option);\n      } else {\n        return null;\n      }\n    }\n  } ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n\n} // Window resize handler\n\n\nSwapperComponent.getInstance = (el, componentName = defaultSwapperQueires.componentName) => {\n  const place = SwapperStore.get(el.id);\n\n  if (place) {\n    return place;\n  }\n\n  return null;\n};\n\nSwapperComponent.createInstances = (selector = defaultSwapperQueires.instanseQuery, options = defaultSwapperOptions, queries = defaultSwapperQueires) => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let place = SwapperComponent.getInstance(item);\n\n    if (!place) {\n      place = new SwapperComponent(item, options, queries);\n    }\n  });\n};\n\nSwapperComponent.createInsance = (selector = defaultSwapperQueires.instanseQuery, options = defaultSwapperOptions, queries = defaultSwapperQueires) => {\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let place = SwapperComponent.getInstance(item);\n\n  if (!place) {\n    place = new SwapperComponent(item, options, queries);\n  }\n\n  return place;\n};\n\nSwapperComponent.bootstrap = (selector = defaultSwapperQueires.instanseQuery) => {\n  SwapperComponent.createInstances(selector);\n};\n\nSwapperComponent.reinitialization = (selector = defaultSwapperQueires.instanseQuery) => {\n  SwapperComponent.createInstances(selector);\n};\n\nwindow.addEventListener('resize', function () {\n  let timer;\n  throttle(timer, () => {\n    // Locate and update Offcanvas instances on window resize\n    const elements = document.querySelectorAll(defaultSwapperQueires.instanseQuery);\n    elements.forEach(el => {\n      const place = SwapperComponent.getInstance(el);\n\n      if (place) {\n        place.update();\n      }\n    });\n  }, 200);\n});\nexport { SwapperComponent, defaultSwapperOptions, defaultSwapperQueires };","map":{"version":3,"sources":["/Users/joseluis/Desarrollos/Template/MetronicReact/src/_metronic/assets/ts/components/_SwapperComponent.ts"],"names":["getAttributeValueByBreakpoint","stringSnakeToCamel","getObjectPropertyValueByKey","EventHandlerUtil","throttle","SwapperStore","set","instanceId","drawerComponentObj","has","store","get","remove","delete","getAllInstances","Map","defaultSwapperOptions","mode","defaultSwapperQueires","componentName","instanseQuery","attrQuery","SwapperComponent","constructor","_element","_options","_queries","element","options","queries","update","parentSelector","getOption","toString","parentElement","document","querySelector","parentNode","prepend","append","on","name","handler","one","off","trigger","event","Object","assign","id","attr","getAttribute","value","String","optionName","option","getInstance","el","place","createInstances","selector","elements","body","querySelectorAll","forEach","item","createInsance","bootstrap","reinitialization","window","addEventListener","timer"],"mappings":"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","sourcesContent":["import {\r\n  getAttributeValueByBreakpoint,\r\n  stringSnakeToCamel,\r\n  getObjectPropertyValueByKey,\r\n  EventHandlerUtil,\r\n  throttle,\r\n} from '../_utils/index'\r\n\r\nexport class SwapperStore {\r\n  static store: Map<string, SwapperComponent> = new Map()\r\n\r\n  public static set(instanceId: string, drawerComponentObj: SwapperComponent): void {\r\n    if (SwapperStore.has(instanceId)) {\r\n      return\r\n    }\r\n\r\n    SwapperStore.store.set(instanceId, drawerComponentObj);\r\n  }\r\n\r\n  public static get(instanceId: string): SwapperComponent | undefined {\r\n    if (!SwapperStore.has(instanceId)) {\r\n      return\r\n    }\r\n    return SwapperStore.store.get(instanceId);\r\n  }\r\n\r\n  public static remove(instanceId: string): void {\r\n    if (!SwapperStore.has(instanceId)) {\r\n      return\r\n    }\r\n\r\n    SwapperStore.store.delete(instanceId)\r\n  }\r\n\r\n  public static has(instanceId: string): boolean {\r\n    return SwapperStore.store.has(instanceId);\r\n  }\r\n\r\n  public static getAllInstances() {\r\n    return SwapperStore.store;\r\n  }\r\n}\r\n\r\nexport interface ISwapperOptions {\r\n  mode: string\r\n}\r\n\r\nexport interface ISwapperQueries {\r\n  componentName: string\r\n  instanseQuery: string\r\n  attrQuery: string\r\n}\r\n\r\nconst defaultSwapperOptions: ISwapperOptions = {\r\n  mode: 'append',\r\n}\r\n\r\nconst defaultSwapperQueires: ISwapperQueries = {\r\n  componentName: 'swapper',\r\n  instanseQuery: '[data-kt-swapper=\"true\"]',\r\n  attrQuery: 'data-kt-swapper-',\r\n}\r\n\r\nclass SwapperComponent {\r\n  element: HTMLElement\r\n  options: ISwapperOptions\r\n  queries: ISwapperQueries\r\n\r\n  constructor(_element: HTMLElement, _options: ISwapperOptions, _queries: ISwapperQueries) {\r\n    this.element = _element\r\n    this.options = Object.assign(defaultSwapperOptions, _options)\r\n    this.queries = _queries\r\n\r\n    // Initial update\r\n    this.update()\r\n\r\n    SwapperStore.set(this.element.id, this)\r\n  }\r\n\r\n  private getOption(name: string) {\r\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`)\r\n    if (attr) {\r\n      let value = getAttributeValueByBreakpoint(attr)\r\n      if (attr != null && String(value) === 'true') {\r\n        return true\r\n      } else if (value !== null && String(value) === 'false') {\r\n        return false\r\n      }\r\n      return value\r\n    } else {\r\n      const optionName = stringSnakeToCamel(name)\r\n      const option = getObjectPropertyValueByKey(this.options, optionName)\r\n      if (option) {\r\n        return getAttributeValueByBreakpoint(option)\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n  public update = () => {\r\n    const parentSelector = this.getOption('parent')?.toString()\r\n    const mode = this.getOption('mode')\r\n    const parentElement = parentSelector ? document.querySelector(parentSelector) : null\r\n\r\n    if (parentElement && this.element.parentNode !== parentElement) {\r\n      if (mode === 'prepend') {\r\n        parentElement.prepend(this.element)\r\n      } else if (mode === 'append') {\r\n        parentElement.append(this.element)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Event API\r\n  public on = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.on(this.element, name, handler)\r\n  }\r\n\r\n  public one = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.one(this.element, name, handler)\r\n  }\r\n\r\n  public off = (name: string) => {\r\n    return EventHandlerUtil.off(this.element, name)\r\n  }\r\n\r\n  public trigger = (name: string, event: Event) => {\r\n    return EventHandlerUtil.trigger(this.element, name, event)\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (\r\n    el: HTMLElement,\r\n    componentName: string = defaultSwapperQueires.componentName\r\n  ): SwapperComponent | null => {\r\n    const place = SwapperStore.get(el.id)\r\n    if (place) {\r\n      return place as SwapperComponent\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (\r\n    selector: string = defaultSwapperQueires.instanseQuery,\r\n    options: ISwapperOptions = defaultSwapperOptions,\r\n    queries: ISwapperQueries = defaultSwapperQueires\r\n  ) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let place = SwapperComponent.getInstance(item)\r\n      if (!place) {\r\n        place = new SwapperComponent(item, options, queries)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string = defaultSwapperQueires.instanseQuery,\r\n    options: ISwapperOptions = defaultSwapperOptions,\r\n    queries: ISwapperQueries = defaultSwapperQueires\r\n  ): SwapperComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let place = SwapperComponent.getInstance(item)\r\n    if (!place) {\r\n      place = new SwapperComponent(item, options, queries)\r\n    }\r\n    return place\r\n  }\r\n\r\n  public static bootstrap = (selector: string = defaultSwapperQueires.instanseQuery) => {\r\n    SwapperComponent.createInstances(selector)\r\n  }\r\n\r\n  public static reinitialization = (selector: string = defaultSwapperQueires.instanseQuery) => {\r\n    SwapperComponent.createInstances(selector)\r\n  }\r\n}\r\n\r\n// Window resize handler\r\nwindow.addEventListener('resize', function () {\r\n  let timer\r\n  throttle(\r\n    timer,\r\n    () => {\r\n      // Locate and update Offcanvas instances on window resize\r\n      const elements = document.querySelectorAll(defaultSwapperQueires.instanseQuery)\r\n      elements.forEach((el) => {\r\n        const place = SwapperComponent.getInstance(el as HTMLElement)\r\n        if (place) {\r\n          place.update()\r\n        }\r\n      })\r\n    },\r\n    200\r\n  )\r\n})\r\n\r\nexport {SwapperComponent, defaultSwapperOptions, defaultSwapperQueires}\r\n"]},"metadata":{},"sourceType":"module"}