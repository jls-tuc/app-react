{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from '../redux/AuthCRUD';\nimport { UsersTableMock } from './usersTableMock';\nexport function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(({\n    data\n  }) => {\n    const {\n      usuario,\n      password\n    } = JSON.parse(data);\n\n    if (usuario && password) {\n      const user = axios.post(LOGIN_URL, {\n        usuario,\n        password\n      });\n\n      if (user) {\n        const auth = user.auth;\n        return [200, { ...auth,\n          password: undefined\n        }];\n      }\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(({\n    data\n  }) => {\n    const {\n      email,\n      firstname,\n      lastname,\n      password\n    } = JSON.parse(data);\n\n    if (email && firstname && lastname && password) {\n      const user = {\n        id: generateUserId(),\n        email,\n        firstname,\n        lastname,\n        username: `${firstname}-${lastname}`,\n        password,\n        roles: [2],\n        // Manager\n        auth: {\n          accessToken: 'access-token-' + Math.random(),\n          refreshToken: 'access-token-' + Math.random()\n        },\n        pic: process.env.PUBLIC_URL + '/media/users/default.jpg'\n      };\n      UsersTableMock.table.push(user);\n      const auth = user.auth;\n      return [200, { ...auth,\n        password: undefined\n      }];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({\n    data\n  }) => {\n    const {\n      email\n    } = JSON.parse(data);\n\n    if (email) {\n      const user = UsersTableMock.table.find(x => x.email.toLowerCase() === email.toLowerCase());\n      let result = false;\n\n      if (user) {\n        user.password = undefined;\n        result = true;\n        return [200, {\n          result,\n          password: undefined\n        }];\n      }\n    }\n\n    return [400];\n  });\n  /*   mock.onGet(GET_USER_BY_ACCESSTOKEN_URL).reply(({headers: {Authorization}}) => {\r\n    const accessToken =\r\n      Authorization && Authorization.startsWith('Bearer ') && Authorization.slice('Bearer '.length)\r\n      if (accessToken) {\r\n      const user = UsersTableMock.table.find((x) => x.auth?.accessToken === accessToken)\r\n        if (user) {\r\n        return [200, {...user, password: undefined}]\r\n      }\r\n    }\r\n      return [401]\r\n  }) */\n\n  function generateUserId() {\n    const ids = UsersTableMock.table.map(el => el.id);\n    const maxId = Math.max(...ids);\n    return maxId + 1;\n  }\n}","map":{"version":3,"sources":["/Users/joseluis/Desarrollos/Template/MetronicReact1/src/app/modules/auth/__mocks__/mockAuth.ts"],"names":["axios","LOGIN_URL","REGISTER_URL","REQUEST_PASSWORD_URL","UsersTableMock","mockAuth","mock","onPost","reply","data","usuario","password","JSON","parse","user","post","auth","undefined","email","firstname","lastname","id","generateUserId","username","roles","accessToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","table","push","find","x","toLowerCase","result","ids","map","el","maxId","max"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SACEC,SADF,EAGEC,YAHF,EAIEC,oBAJF,QAKO,mBALP;AAMA,SAAQC,cAAR,QAA6B,kBAA7B;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAqC;AAC1CA,EAAAA,IAAI,CAACC,MAAL,CAAYN,SAAZ,EAAuBO,KAAvB,CAA6B,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AACvC,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAsBC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA5B;;AAEA,QAAIC,OAAO,IAAIC,QAAf,EAAyB;AACvB,YAAMG,IAAS,GAAGd,KAAK,CAACe,IAAN,CAAWd,SAAX,EAAsB;AAACS,QAAAA,OAAD;AAAUC,QAAAA;AAAV,OAAtB,CAAlB;;AAEA,UAAIG,IAAJ,EAAU;AACR,cAAME,IAAI,GAAGF,IAAI,CAACE,IAAlB;AACA,eAAO,CAAC,GAAD,EAAM,EAAC,GAAGA,IAAJ;AAAUL,UAAAA,QAAQ,EAAEM;AAApB,SAAN,CAAP;AACD;AACF;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GAbD;AAeAX,EAAAA,IAAI,CAACC,MAAL,CAAYL,YAAZ,EAA0BM,KAA1B,CAAgC,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAC1C,UAAM;AAACS,MAAAA,KAAD;AAAQC,MAAAA,SAAR;AAAmBC,MAAAA,QAAnB;AAA6BT,MAAAA;AAA7B,QAAyCC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA/C;;AAEA,QAAIS,KAAK,IAAIC,SAAT,IAAsBC,QAAtB,IAAkCT,QAAtC,EAAgD;AAC9C,YAAMG,IAAe,GAAG;AACtBO,QAAAA,EAAE,EAAEC,cAAc,EADI;AAEtBJ,QAAAA,KAFsB;AAGtBC,QAAAA,SAHsB;AAItBC,QAAAA,QAJsB;AAKtBG,QAAAA,QAAQ,EAAG,GAAEJ,SAAU,IAAGC,QAAS,EALb;AAMtBT,QAAAA,QANsB;AAOtBa,QAAAA,KAAK,EAAE,CAAC,CAAD,CAPe;AAOV;AACZR,QAAAA,IAAI,EAAE;AACJS,UAAAA,WAAW,EAAE,kBAAkBC,IAAI,CAACC,MAAL,EAD3B;AAEJC,UAAAA,YAAY,EAAE,kBAAkBF,IAAI,CAACC,MAAL;AAF5B,SARgB;AAYtBE,QAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB;AAZR,OAAxB;AAeA5B,MAAAA,cAAc,CAAC6B,KAAf,CAAqBC,IAArB,CAA0BpB,IAA1B;AACA,YAAME,IAAI,GAAGF,IAAI,CAACE,IAAlB;AAEA,aAAO,CAAC,GAAD,EAAM,EAAC,GAAGA,IAAJ;AAAUL,QAAAA,QAAQ,EAAEM;AAApB,OAAN,CAAP;AACD;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GA1BD;AA4BAX,EAAAA,IAAI,CAACC,MAAL,CAAYJ,oBAAZ,EAAkCK,KAAlC,CAAwC,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAClD,UAAM;AAACS,MAAAA;AAAD,QAAUN,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB;;AAEA,QAAIS,KAAJ,EAAW;AACT,YAAMJ,IAAI,GAAGV,cAAc,CAAC6B,KAAf,CAAqBE,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAAClB,KAAF,CAAQmB,WAAR,OAA0BnB,KAAK,CAACmB,WAAN,EAA3D,CAAb;AACA,UAAIC,MAAM,GAAG,KAAb;;AACA,UAAIxB,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACH,QAAL,GAAgBM,SAAhB;AACAqB,QAAAA,MAAM,GAAG,IAAT;AACA,eAAO,CAAC,GAAD,EAAM;AAACA,UAAAA,MAAD;AAAS3B,UAAAA,QAAQ,EAAEM;AAAnB,SAAN,CAAP;AACD;AACF;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GAdD;AAgBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE,WAASK,cAAT,GAAkC;AAChC,UAAMiB,GAAG,GAAGnC,cAAc,CAAC6B,KAAf,CAAqBO,GAArB,CAA0BC,EAAD,IAAQA,EAAE,CAACpB,EAApC,CAAZ;AACA,UAAMqB,KAAK,GAAGhB,IAAI,CAACiB,GAAL,CAAS,GAAGJ,GAAZ,CAAd;AACA,WAAOG,KAAK,GAAG,CAAf;AACD;AACF","sourcesContent":["import axios from 'axios'\r\nimport MockAdapter from 'axios-mock-adapter'\r\nimport {UserModel} from '../models/UserModel'\r\nimport {\r\n  LOGIN_URL,\r\n  GET_USER_BY_ACCESSTOKEN_URL,\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL,\r\n} from '../redux/AuthCRUD'\r\nimport {UsersTableMock} from './usersTableMock'\r\n\r\nexport function mockAuth(mock: MockAdapter) {\r\n  mock.onPost(LOGIN_URL).reply(({data}) => {\r\n    const {usuario, password} = JSON.parse(data)\r\n\r\n    if (usuario && password) {\r\n      const user: any = axios.post(LOGIN_URL, {usuario, password})\r\n\r\n      if (user) {\r\n        const auth = user.auth\r\n        return [200, {...auth, password: undefined}]\r\n      }\r\n    }\r\n\r\n    return [400]\r\n  })\r\n\r\n  mock.onPost(REGISTER_URL).reply(({data}) => {\r\n    const {email, firstname, lastname, password} = JSON.parse(data)\r\n\r\n    if (email && firstname && lastname && password) {\r\n      const user: UserModel = {\r\n        id: generateUserId(),\r\n        email,\r\n        firstname,\r\n        lastname,\r\n        username: `${firstname}-${lastname}`,\r\n        password,\r\n        roles: [2], // Manager\r\n        auth: {\r\n          accessToken: 'access-token-' + Math.random(),\r\n          refreshToken: 'access-token-' + Math.random(),\r\n        },\r\n        pic: process.env.PUBLIC_URL + '/media/users/default.jpg',\r\n      }\r\n\r\n      UsersTableMock.table.push(user)\r\n      const auth = user.auth\r\n\r\n      return [200, {...auth, password: undefined}]\r\n    }\r\n\r\n    return [400]\r\n  })\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({data}) => {\r\n    const {email} = JSON.parse(data)\r\n\r\n    if (email) {\r\n      const user = UsersTableMock.table.find((x) => x.email.toLowerCase() === email.toLowerCase())\r\n      let result = false\r\n      if (user) {\r\n        user.password = undefined\r\n        result = true\r\n        return [200, {result, password: undefined}]\r\n      }\r\n    }\r\n\r\n    return [400]\r\n  })\r\n\r\n  /*   mock.onGet(GET_USER_BY_ACCESSTOKEN_URL).reply(({headers: {Authorization}}) => {\r\n    const accessToken =\r\n      Authorization && Authorization.startsWith('Bearer ') && Authorization.slice('Bearer '.length)\r\n\r\n    if (accessToken) {\r\n      const user = UsersTableMock.table.find((x) => x.auth?.accessToken === accessToken)\r\n\r\n      if (user) {\r\n        return [200, {...user, password: undefined}]\r\n      }\r\n    }\r\n\r\n    return [401]\r\n  }) */\r\n\r\n  function generateUserId(): number {\r\n    const ids = UsersTableMock.table.map((el) => el.id)\r\n    const maxId = Math.max(...ids)\r\n    return maxId + 1\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}